#!/usr/bin/env nodejs

var fs=require('fs');
var child_process=require('child_process');

var CLP=new CLParams(process.argv);
console.log(CLP.namedParameters);

var dsfolders=(CLP.namedParameters.dataset_folders||'').split(';');
var outfolders=(CLP.namedParameters.output_folders||'').split(';');

if (dsfolders.length==1) dsfolders.push(dsfolder[0]);
if (outfolders.length==1) outfolders.push(outfolder[0]);

var dsparams=JSON.parse(read_text_file(dsfolders[0]+'/params.json')||'{}');

var firings1_path=outfolders[0]+'/'+(CLP.namedParameters.firings1||'firings.mda');
var firings2_path=outfolders[1]+'/'+(CLP.namedParameters.firings2||'firings.mda');

var args='';
if (file_exists(outfolders[0]+'/raw.mda')) {
	args+=' --raw='+outfolders[0]+'/raw.mda';
}
else if (file_exists(dsfolders[0]+'/raw.mda')) {
	args+=' --raw='+dsfolders[0]+'/raw.mda';
}
if (file_exists(outfolders[0]+'/filt.mda')) {
	args+=' --filt='+outfolders[0]+'/filt.mda';
}
if (file_exists(outfolders[0]+'/pre.mda')) {
	args+=' --pre='+outfolders[0]+'/pre.mda';
}
if (file_exists(outfolders[0]+'/geom.csv')) {
	args+=' --geom='+outfolders[0]+'/geom.csv';
}
else if (file_exists(dsfolders[0]+'/geom.csv')) {
	args+=' --geom='+dsfolders[0]+'/geom.csv';
}
args+=' --firings1='+firings1_path;
args+=' --firings2='+firings2_path;
args+=' --samplerate='+(dsparams.samplerate||0);
args=args.split(' ');
make_system_call('mountaincompare',args);

function CLParams(argv) {
	this.unnamedParameters=[];
	this.namedParameters={};

	var args=argv.slice(2);
	for (var i=0; i<args.length; i++) {
		var arg0=args[i];
		if (arg0.indexOf('--')===0) {
			arg0=arg0.slice(2);
			var ind=arg0.indexOf('=');
			if (ind>=0) {
				this.namedParameters[arg0.slice(0,ind)]=arg0.slice(ind+1);
			}
			else {
				this.namedParameters[arg0]=args[i+1]||'';
				i++;
			}
		}
		else if (arg0.indexOf('-')===0) {
			arg0=arg0.slice(1);
			this.namedParameters[arg0]='';
		}
		else {
			this.unnamedParameters.push(arg0);
		}
	}
};

var s_num_system_calls_running=0;
function make_system_call(cmd,args,callback) {
	console.log ('Running '+cmd+' '+args.join(' '));
	s_num_system_calls_running++;
	var pp=child_process.spawn(cmd,args);
	pp.stdout.setEncoding('utf8');
	pp.stderr.setEncoding('utf8');
	var done=false;
	pp.on('close', function(code) {
  		done=true;
		if (callback) callback();
		s_num_system_calls_running--;
	});
	pp.on('error',function(err) {
		console.log ('Process error: '+cmd+' '+args.join(' '));
		console.log (err);
	});
	var all_stdout='';
	var all_stderr='';
	pp.stdout.on('data',function(data) {
		console.log ('----'+data);
		all_stdout+=data;
	});
	pp.stderr.on('data',function(data) {
		console.log ('===='+data);
		all_stderr+=data;
	});
}

function read_text_file(path) {
	return fs.readFileSync(path,'utf8');
}

function file_exists(path) {
	return (fs.existsSync(path))||(fs.existsSync(path+'.prv'));
}
