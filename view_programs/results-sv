#!/usr/bin/env nodejs

var fs=require('fs');
var child_process=require('child_process');

var CLP=new CLParams(process.argv);

var dsfolder=CLP.namedParameters.dataset_folders;
var outfolder=CLP.namedParameters.output_folders;
var session_names=CLP.namedParameters.session_names;
var session_str='';
if (session_names) session_str='/'+session_names;

var dsparams=JSON.parse(read_text_file(dsfolder+'/params.json')||'{}');

var firings_path=outfolder+'/firings.mda';
if ('ground_truth' in CLP.namedParameters) {
	firings_path=dsfolder+'/firings_true.mda';
}
if ('firings' in CLP.namedParameters) {
	firings_path=CLP.namedParameters['firings'];
}

var args='';
if (file_exists(outfolder+'/raw.mda')) {
	args+=' --raw='+outfolder+'/raw.mda';
}	
else if (file_exists(dsfolder+session_str+'/raw.mda')) {
	args+=' --raw='+dsfolder+session_str+'/raw.mda';
}
if (file_exists(outfolder+'/filt.mda')) {
	args+=' --filt='+outfolder+'/filt.mda';
}

if (file_exists(outfolder+'/pre.mda')) {
	args+=' --pre='+outfolder+'/pre.mda';
}

if (file_exists(outfolder+'/geom.csv')) {
	args+=' --geom='+outfolder+'/geom.csv';
}
else if (file_exists(dsfolder+'/geom.csv')) {
	args+=' --geom='+dsfolder+'/geom.csv';
}

if (file_exists(outfolder+'/cluster_metrics.csv')) {
	args+=' --cluster_metrics='+outfolder+'/cluster_metrics.csv';
}

if (file_exists(outfolder+'/cluster_metrics.json')) {
	args+=' --cluster_metrics='+outfolder+'/cluster_metrics.json';
}

if (file_exists(outfolder+'/cluster_pair_metrics.csv')) {
	args+=' --cluster_pair_metrics='+outfolder+'/cluster_pair_metrics.csv';
}
args+=' --firings='+firings_path;
args+=' --samplerate='+(dsparams.samplerate||0);
var curation_script_path='';
if (file_exists(outfolder+'/curation.script')) {
	curation_script_path=outfolder+'/curation.script';
}
if ('curation' in CLP.namedParameters) {
	curation_script_path=CLP.namedParameters.curation;
}
if (curation_script_path) {
	args+=' --curation='+curation_script_path;
}
args=args.split(' ');
console.log('spikeview '+args.join(' '));
make_system_call('spikeview',args);

function CLParams(argv) {
	this.unnamedParameters=[];
	this.namedParameters={};

	var args=argv.slice(2);
	for (var i=0; i<args.length; i++) {
		var arg0=args[i];
		if (arg0.indexOf('--')===0) {
			arg0=arg0.slice(2);
			var ind=arg0.indexOf('=');
			if (ind>=0) {
				this.namedParameters[arg0.slice(0,ind)]=arg0.slice(ind+1);
			}
			else {
				this.namedParameters[arg0]=args[i+1]||'';
				i++;
			}
		}
		else if (arg0.indexOf('-')===0) {
			arg0=arg0.slice(1);
			this.namedParameters[arg0]='';
		}
		else {
			this.unnamedParameters.push(arg0);
		}
	}
};

var s_num_system_calls_running=0;
function make_system_call(cmd,args,callback) {
	console.log ('Running '+cmd+' '+args.join(' '));
	s_num_system_calls_running++;
	var pp=child_process.spawn(cmd,args);
	pp.stdout.setEncoding('utf8');
	pp.stderr.setEncoding('utf8');
	var done=false;
	pp.on('close', function(code) {
  		done=true;
		if (callback) callback();
		s_num_system_calls_running--;
	});
	pp.on('error',function(err) {
		console.log ('Process error: '+cmd+' '+args.join(' '));
		console.log (err);
	});
	var all_stdout='';
	var all_stderr='';
	pp.stdout.on('data',function(data) {
		console.log ('---- '+data);
		all_stdout+=data;
	});
	pp.stderr.on('data',function(data) {
		console.log ('===== '+data);
		all_stderr+=data;
	});
}

function read_text_file(path) {
	return fs.readFileSync(path,'utf8');
}

function file_exists(path) {
	return (fs.existsSync(path))||(fs.existsSync(path+'.prv'));
}
